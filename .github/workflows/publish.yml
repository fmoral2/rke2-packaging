name: Publish
on:
  release:
    types:
      - published
permissions:
    contents: write
    id-token: write
jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - "centos7"
        arch:
          - "amd64"
        include:
          - arch: "amd64"
            upload-script: "sign-and-upload"
            build: "x86_64-amd64"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test Build Simulation (Skip vault/build for testing)
        env:
          TAG: ${{ github.event.inputs.tag_name || github.ref_name }}
          MATRIX_OS: ${{ matrix.os }}
          MATRIX_ARCH: ${{ matrix.arch }}
        run: |
          echo "ðŸ§ª TEST MODE: Simulating build process"
          echo "Tag: $TAG"
          echo "OS: $MATRIX_OS"
          echo "Arch: $MATRIX_ARCH"
          echo "Build: ${{ matrix.build }}"
          echo "Upload Script: ${{ matrix.upload-script }}"
          
          # Create fake dist directory structure for testing
          mkdir -p dist/$MATRIX_OS/x86_64
          echo "fake-package-content" > dist/$MATRIX_OS/x86_64/rke2-test-$TAG.rpm
          
          echo "âœ… Test build simulation completed"
      
      - name: Test Checksum (Simulation)
        run: |
          echo "ðŸ§ª TEST MODE: Simulating checksum creation"
          cd dist/${{ matrix.os }}/x86_64
          echo "fake-checksum  rke2-test-${{ github.event.inputs.tag_name || github.ref_name }}.rpm" > "sha256sum-${{ matrix.os }}-${{ matrix.arch }}.txt"
          echo "âœ… Test checksum simulation completed"

  trigger-validation:
    runs-on: ubuntu-latest
    needs: publish
    if: always() && (needs.publish.result == 'success')
    steps:
      - name: Trigger distros validation workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DISPATCH_TOKEN }}
          script: |
            // Extract version from the release tag
            const releaseTag = '${{ github.ref_name }}';
            console.log(`Original release tag: ${releaseTag}`);
            
            // Clean the version by removing suffixes like .stable.1, .testing.0, etc.
            // Pattern: keep everything up to +rke2r[number], remove anything after that
            const cleanVersion = releaseTag.replace(/(\+rke2r\d+)\..*$/, '$1');
            console.log(`Cleaned version: ${cleanVersion}`);
            
            // Create the payload for the repository dispatch
            const response = await github.rest.repos.createDispatchEvent({
              owner: 'fmoral2', 
              repo: 'distros-test-framework',
              event_type: 'rke2-release-validation',
              client_payload: {
                rke2_versions: cleanVersion,
                source_repo: '${{ github.repository }}', 
                release_url: '${{ github.event.release.html_url }}',
                triggered_by: '${{ github.actor }}'
              } 
            });

            console.log(`Response: ${JSON.stringify(response)}`);
            console.log(`Triggered validation workflow for RKE2 version: ${cleanVersion}`);
       
